package matinilad.gefrase;

import java.awt.Component;
import java.awt.Toolkit;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Properties;
import java.util.Set;
import java.util.function.Function;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;

/**
 * A janela principal do programa
 *
 * @author Cien
 */
@SuppressWarnings("serial")
public class MainWindow extends javax.swing.JFrame {

    //propriedades de geração de senha para serem salvas
    public static final String PROPERTY_DICTIONARY = "dictionary";
    public static final String PROPERTY_SEPARATOR_CHARACTER = "separatorCharacter";
    public static final String PROPERTY_NUMBER_OF_WORDS = "numberOfWords";
    public static final String PROPERTY_USE_RANDOM_SUFFIX = "useRandomSuffix";
    public static final String PROPERTY_SUFFIX = "suffix";
    public static final String PROPERTY_CAPITALIZATION_MODE = "capitalizationMode";
    public static final String PROPERTY_DO_NOT_SAVE_CONFIGURATION = "doNotSaveConfiguration";

    //ícone do programa
    public static final ImageIcon PROGRAM_ICON = new ImageIcon(MainWindow.class.getResource("icon.png"));

    //arquivo de configuração
    private final Configuration config;
    private Properties configPropertiesBackup = null;
    //o gerador de números
    private final SecureRandom random;
    //a janela de campos extras da senha
    private final ExtraFields extraFields;

    //o dicionário atual
    private Dictionary dict;
    //os índices de palavra da senha gerada
    private int[] generatedPasswordIndices = null;

    //configuração de geração
    //o sufixo de senha
    private String passwordSuffix = "";
    //o modo de capitalização (0 para nenhum, 1 para primeira palavra, 2 para todas as palavras)
    private int capitalizationMode = 0;
    //o separador
    private int separatorCharacter = 0;
    //a quantidade de palavras
    private int numberOfWords = 1;

    /**
     * Cria uma nova janela do programa
     *
     * @param config o arquivo de configuração (não null)
     * @param random a instância do SecureRandom para ser usada (não null)
     */
    public MainWindow(Configuration config, SecureRandom random) {
        this.random = Objects.requireNonNull(random);
        this.config = Objects.requireNonNull(config);
        this.dict = Dictionary.getDictionary(
                this.config.getProperties().getProperty(PROPERTY_DICTIONARY));
        initComponents();

        this.extraFields = new ExtraFields(this);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        passwordStrength = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        generatePassword = new javax.swing.JButton();
        generatedPassword = new javax.swing.JTextField();
        showExtraFieldsButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        dictionaryMenu = new javax.swing.JMenu();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        numberOfWordsMenu = new javax.swing.JMenu();
        separatorMenu = new javax.swing.JMenu();
        capitalizationMenu = new javax.swing.JMenu();
        suffixMenu = new javax.swing.JMenu();
        useRandomSuffixButton = new javax.swing.JCheckBoxMenuItem();
        passwordSuffixButton = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        doNotSaveConfiguration = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        seeAsPlainTextOnlyPassword = new javax.swing.JMenuItem();
        seeAsPlainText = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        generateMultiplePasswordsOnlyPassword = new javax.swing.JMenuItem();
        generateMultiplePasswords = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        recoveryWindowButton = new javax.swing.JMenuItem();
        verificationWindowButton = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        aboutButton = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gefrase - Gerador de Frase-Senha");
        setIconImage(PROGRAM_ICON.getImage());
        setMinimumSize(new java.awt.Dimension(520, 210));

        jLabel5.setText("Senha Gerada:");

        jLabel6.setText("Força da Senha:");

        passwordStrength.setForeground(new java.awt.Color(0, 255, 51));
        passwordStrength.setText("Aperte o Botão \"Gerar\"");

        jLabel8.setForeground(new java.awt.Color(255, 255, 51));
        jLabel8.setText("Aviso: Escreva a senha em um papel para se lembrar e guarde bem, não reutilize senhas!");

        generatePassword.setText("Gerar");
        generatePassword.setMaximumSize(new java.awt.Dimension(75, 23));
        generatePassword.setMinimumSize(new java.awt.Dimension(75, 23));
        generatePassword.setPreferredSize(new java.awt.Dimension(75, 23));
        generatePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePasswordActionPerformed(evt);
            }
        });

        generatedPassword.setEditable(false);
        generatedPassword.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N

        showExtraFieldsButton.setText("Campos Extras");
        showExtraFieldsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showExtraFieldsButtonActionPerformed(evt);
            }
        });

        jMenu2.setText("Editar");

        dictionaryMenu.setText("Dicionário");
        Dictionary[] dictionaries = Dictionary.getDictionaries();
        Arrays.sort(dictionaries, (o1, o2) -> String.CASE_INSENSITIVE_ORDER.compare(o1.toString(), o2.toString()));
        for (Dictionary d:dictionaries) {
            JCheckBoxMenuItem item = new JCheckBoxMenuItem(d.toString());
            if (this.dict == d) {
                item.setSelected(true);
            }
            final Dictionary currentDictionary = d;
            item.addActionListener((evt) -> {
                Component[] components = dictionaryMenu.getMenuComponents();
                for (Component c:components) {
                    ((JCheckBoxMenuItem)c).setSelected(false);
                }
                item.setSelected(true);

                this.dict = currentDictionary;
                this.config.getProperties().setProperty(PROPERTY_DICTIONARY, this.dict.getId());
            });
            dictionaryMenu.add(item);
        }
        jMenu2.add(dictionaryMenu);
        jMenu2.add(jSeparator3);

        numberOfWordsMenu.setText("Quantidade de Palavras");
        {
            this.numberOfWords = Integer.parseInt(this.config.getProperties().getProperty(PROPERTY_NUMBER_OF_WORDS));
            for (int i = 1; i <= 16; i++) {
                final int finalIndex = i;
                JCheckBoxMenuItem box = new JCheckBoxMenuItem(Integer.toString(i));
                box.setSelected(this.numberOfWords == i);
                box.addActionListener((evt) -> {
                    for (int j = 0; j < MainWindow.this.numberOfWordsMenu.getItemCount(); j++) {
                        if (MainWindow.this.numberOfWordsMenu.getItem(j) instanceof JCheckBoxMenuItem b) {
                            b.setSelected(false);
                        }
                    }
                    box.setSelected(true);
                    MainWindow.this.numberOfWords = finalIndex;

                    MainWindow.this.onNumberOfWordsChanged();
                });
                this.numberOfWordsMenu.add(box);
            }
        }
        jMenu2.add(numberOfWordsMenu);

        separatorMenu.setText("Separador");
        {
            this.separatorCharacter = Integer.parseInt(this.config.getProperties().getProperty(PROPERTY_SEPARATOR_CHARACTER));

            List<JCheckBoxMenuItem> allSeparators = new ArrayList<>();
            Set<Character> addedCharacters = new HashSet<>();
            Function<Character, JCheckBoxMenuItem> createSeparatorItem = (c) -> {
                String text;
                switch (c) {
                    case ' ' -> {text = "Espaço";}
                    case '\0' -> {text = "Nenhum";}
                    default -> {text = Character.toString(c);}
                }
                JCheckBoxMenuItem item = new JCheckBoxMenuItem(text);
                item.setSelected(MainWindow.this.separatorCharacter == ((int)c));
                allSeparators.add(item);
                addedCharacters.add(c);
                item.addActionListener((evt) -> {
                    MainWindow.this.separatorCharacter = (int) c;

                    for (JCheckBoxMenuItem e:allSeparators) {
                        e.setSelected(false);
                    }
                    item.setSelected(true);

                    MainWindow.this.onSeparatorChanged();
                });
                return item;
            };

            JMenu more = new JMenu("Mais");

            this.separatorMenu.add(createSeparatorItem.apply('\0'));
            this.separatorMenu.add(createSeparatorItem.apply(' '));
            this.separatorMenu.add(new JSeparator());
            this.separatorMenu.add(createSeparatorItem.apply('-'));
            this.separatorMenu.add(createSeparatorItem.apply('.'));
            this.separatorMenu.add(createSeparatorItem.apply('@'));
            this.separatorMenu.add(createSeparatorItem.apply('_'));
            this.separatorMenu.add(createSeparatorItem.apply('|'));
            this.separatorMenu.add(new JSeparator());
            this.separatorMenu.add(more);

            int[][] separatorRanges = {{32,48},{58,65},{91,96},{123,127}};
            for (int i = 0; i < separatorRanges.length; i++) {
                int from = separatorRanges[i][0];
                int to = separatorRanges[i][1];
                for (int j = from; j < to; j++) {
                    char c = (char)j;
                    if (!addedCharacters.contains(c)) {
                        more.add(createSeparatorItem.apply(c));
                    }
                }
            }
        }
        jMenu2.add(separatorMenu);

        capitalizationMenu.setText("Capitalização");
        {
            this.capitalizationMode = Integer.parseInt(this.config.getProperties().getProperty(PROPERTY_CAPITALIZATION_MODE));
            String[] names = {"Desativada", "Primeira Palavra", "Todas as Palavras"};
            for (int i = 0; i < names.length; i++) {
                final int mode = i;

                JCheckBoxMenuItem item = new JCheckBoxMenuItem(names[i]);
                item.setSelected(this.capitalizationMode == mode);
                item.addActionListener((evt) -> {
                    this.capitalizationMode = mode;
                    for (int j = 0; j < this.capitalizationMenu.getItemCount(); j++) {
                        this.capitalizationMenu.getItem(j).setSelected(false);
                    }
                    item.setSelected(true);

                    this.config.getProperties().setProperty(PROPERTY_CAPITALIZATION_MODE, Integer.toString(mode));
                    updatePasswordField();
                });

                this.capitalizationMenu.add(item);
            }
        }
        jMenu2.add(capitalizationMenu);

        suffixMenu.setText("Sufixo");

        useRandomSuffixButton.setSelected(true);
        useRandomSuffixButton.setText("Usar Sufixo Aleatório");
        useRandomSuffixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useRandomSuffixButtonActionPerformed(evt);
            }
        });
        suffixMenu.add(useRandomSuffixButton);
        {
            boolean selected = Boolean.valueOf(this.config.getProperties().getProperty(PROPERTY_USE_RANDOM_SUFFIX));
            this.useRandomSuffixButton.setSelected(selected);
        }

        passwordSuffixButton.setText("Definir");
        passwordSuffixButton.setEnabled(false);
        {
            this.passwordSuffix = this.config.getProperties().getProperty(PROPERTY_SUFFIX);
            boolean selected = Boolean.valueOf(this.config.getProperties().getProperty(PROPERTY_USE_RANDOM_SUFFIX));
            this.passwordSuffixButton.setEnabled(!selected);
        }
        passwordSuffixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordSuffixButtonActionPerformed(evt);
            }
        });
        suffixMenu.add(passwordSuffixButton);

        jMenu2.add(suffixMenu);
        jMenu2.add(jSeparator2);

        doNotSaveConfiguration.setSelected(Boolean.valueOf(this.config.getProperties().getProperty(PROPERTY_DO_NOT_SAVE_CONFIGURATION))
        );
        doNotSaveConfiguration.setText("Não Salvar Configurações");
        doNotSaveConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNotSaveConfigurationActionPerformed(evt);
            }
        });
        jMenu2.add(doNotSaveConfiguration);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Exibir");

        jMenu3.setText("Em Texto Plano");

        seeAsPlainTextOnlyPassword.setText("Somente Senha");
        seeAsPlainTextOnlyPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeAsPlainTextOnlyPasswordActionPerformed(evt);
            }
        });
        jMenu3.add(seeAsPlainTextOnlyPassword);

        seeAsPlainText.setText("Todos os Campos");
        seeAsPlainText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeAsPlainTextActionPerformed(evt);
            }
        });
        jMenu3.add(seeAsPlainText);

        jMenu4.add(jMenu3);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Ferramentas");

        jMenu6.setText("Gerar Várias Senhas");

        generateMultiplePasswordsOnlyPassword.setText("Somente Senha");
        generateMultiplePasswordsOnlyPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMultiplePasswordsOnlyPasswordActionPerformed(evt);
            }
        });
        jMenu6.add(generateMultiplePasswordsOnlyPassword);

        generateMultiplePasswords.setText("Todos os Campos");
        generateMultiplePasswords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMultiplePasswordsActionPerformed(evt);
            }
        });
        jMenu6.add(generateMultiplePasswords);

        jMenu5.add(jMenu6);
        jMenu5.add(jSeparator1);

        recoveryWindowButton.setText("Recuperar Senha");
        recoveryWindowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recoveryWindowButtonActionPerformed(evt);
            }
        });
        jMenu5.add(recoveryWindowButton);

        verificationWindowButton.setText("Verificar Senha");
        verificationWindowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificationWindowButtonActionPerformed(evt);
            }
        });
        jMenu5.add(verificationWindowButton);

        jMenuBar1.add(jMenu5);

        jMenu1.setText("Ajuda");

        aboutButton.setText("Sobre");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        jMenu1.add(aboutButton);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generatedPassword)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .addComponent(passwordStrength, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(showExtraFieldsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generatePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel6)
                .addGap(6, 6, 6)
                .addComponent(passwordStrength)
                .addGap(12, 12, 12)
                .addComponent(jLabel5)
                .addGap(6, 6, 6)
                .addComponent(generatedPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generatePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showExtraFieldsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //retorna uma palavra com a primeira letra em maiúsculo
    private String capitalize(String word) {
        return Character.toUpperCase(word.charAt(0)) + word.substring(1);
    }

    //o método de "decorar" a senha
    //a partir das configurações atuais
    //ex: a b c d -> A.b.c.d.12
    private String decoratePassword(String[] words) {
        char sep = (char) this.separatorCharacter;
        StringBuilder b = new StringBuilder();
        for (int i = 0; i < words.length; i++) {
            //capitalização
            //ex: a b c d -> A b c d
            capitalize:
            {
                if (i == 0 && this.capitalizationMode == 1) {
                    b.append(capitalize(words[i]));
                    break capitalize;
                }
                if (this.capitalizationMode == 2) {
                    b.append(capitalize(words[i]));
                    break capitalize;
                }
                b.append(words[i]);
            }
            //separador
            //ex: A b c d -> A.b.c.d
            if (i != (words.length - 1) && sep != '\0') {
                b.append(sep);
            }
        }
        //o sufixo
        if (this.useRandomSuffixButton.isSelected()) {
            //aleatório
            //certos sites não permite sequências como 11, 22, 33...
            int n0 = this.random.nextInt(10);
            int n1 = this.random.nextInt(10);
            while (n0 == n1) {
                n1 = this.random.nextInt(10);
            }
            //ex: A.b.c.d -> A.b.c.d.12
            b.append(sep).append(n0).append(n1);
        } else if (this.passwordSuffix != null && !this.passwordSuffix.isEmpty()) {
            //definido pelo usuário
            //ex: A.b.c.d -> A.b.c.d.2023
            b.append(sep).append(this.passwordSuffix);
        }
        return b.toString();
    }

    //retorna a força de uma senha como o expoente de uma potência de dois
    //log2(palavra1) + log2(palavra2) + ...
    private float getPasswordStrength(int[] indices) {
        double strength = 0.0;
        for (int i : indices) {
            strength += Math.log(i + 1.0) / Math.log(2.0);
        }
        return (float) strength;
    }

    //gera uma senha, retornando os índices de uma palavra
    private int[] generatePassword() {
        int[] indices = new int[this.numberOfWords];
        for (int i = 0; i < indices.length; i++) {
            indices[i] = this.random.nextInt(this.dict.getNumberOfWords());
        }

        return indices;
    }

    //calcula a palavra de recuperação com um XOR
    //palavra1 ^ palavra2 ^ ...
    private int calculateRecoveryWord(int[] indices) {
        int xor = 0;
        for (int i = 0; i < indices.length; i++) {
            xor ^= indices[i];
        }
        return xor;
    }

    //retorna uma palavra do dicionário
    //ou o índice em hexadecimal se for maior
    //que a quantidade de palavras do dicionário
    private String getDictionaryWord(int index) {
        if (index >= this.dict.getNumberOfWords()) {
            return "0x" + Integer.toHexString(index).toUpperCase();
        }
        return this.dict.getWord(index);
    }

    //converte os índices de uma senha para
    //as palavras do dicionário
    private String[] getDictionaryWords(int[] indices) {
        String[] words = new String[indices.length];
        for (int i = 0; i < indices.length; i++) {
            words[i] = getDictionaryWord(indices[i]);
        }
        return words;
    }

    //retorna uma senha em texto plano
    private String plainText(
            String password,
            String dictionary,
            String recoveryWord,
            String verificationCode) {
        StringBuilder b = new StringBuilder();
        b.append("Senha:\n");
        b.append(password).append("\n");
        b.append("\n");
        b.append("Dicionário: ").append(dictionary).append("\n");
        b.append("Palavra de Recuperação: ").append(recoveryWord).append("\n");
        b.append("Código de Verificação: ").append(verificationCode);
        return b.toString();
    }

    //atualiza o campo de senha gerada
    private void updatePasswordField() {
        if (this.generatedPasswordIndices == null) {
            return;
        }

        //pega as palavras do dicionário e "decora" a senha
        String[] words = getDictionaryWords(this.generatedPasswordIndices);
        String password = decoratePassword(words);
        this.generatedPassword.setText(password);
        
        //gera o código de verificação
        byte[] randomSalt = VerificationWindow.getRandomSalt(this.random);
        byte[] codeBytes = VerificationWindow.getVerificationCode(randomSalt, password.toCharArray());
        String verificationCode = VerificationWindow.getVerificationCodeHexString(codeBytes);
        this.extraFields.getVerificationCode().setText(verificationCode);
        
        //a força máxima e a força "real" da senha
        float maxStrength = this.generatedPasswordIndices.length * this.dict.getBitsPerWord();
        float realStrength = getPasswordStrength(this.generatedPasswordIndices);

        String formattedMax = String.format("%.2f", maxStrength);
        String formattedStrength = String.format("%.2f", realStrength);
        
        PasswordStrength st = PasswordStrength.from(realStrength);
        
        //preenche os campos de força da senha
        this.passwordStrength.setText(st.getLocalizedName()
                + " - "
                + formattedStrength
                + " Bits / "
                + formattedMax
                + " Bits");
        this.passwordStrength.setForeground(st.getColor());
    }
    
    //o botão de gerar senha
    private void generatePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePasswordActionPerformed
        //gera a senha e a palavra de recuperação
        this.generatedPasswordIndices = generatePassword();
        int recovery = calculateRecoveryWord(this.generatedPasswordIndices);
        this.extraFields.getRecoveryWord().setText(getDictionaryWord(recovery));

        //atualiza o campo de senha
        updatePasswordField();
        //define o campo do dicionário
        this.extraFields.getDictionaryName().setText(this.dict.toString());
    }//GEN-LAST:event_generatePasswordActionPerformed

    //callback para quando o separador for chamado
    private void onSeparatorChanged() {
        this.config.getProperties().setProperty(PROPERTY_SEPARATOR_CHARACTER,
                Integer.toString(this.separatorCharacter));
        updatePasswordField();
    }

    //callback para quando a quantidade de palavras mudar
    private void onNumberOfWordsChanged() {
        this.config.getProperties().setProperty(PROPERTY_NUMBER_OF_WORDS,
                Integer.toString(this.numberOfWords));
    }

    //o botão de sobre
    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        try {
            TextDialog.ofResourceFile(this, "Gefrase", "gefrase.txt").setVisible(true);
        } catch (IOException ex) {
            ex.printStackTrace(System.out);
            TextDialog.ofThrowable(this, ex).setVisible(true);
        }
    }//GEN-LAST:event_aboutButtonActionPerformed

    //o botão de não salvar configuração
    private void doNotSaveConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNotSaveConfigurationActionPerformed
        boolean selected = this.doNotSaveConfiguration.isSelected();
        if (selected) {
            this.configPropertiesBackup = (Properties) this.config.getProperties().clone();
            this.config.getProperties().clear();
        } else {
            if (this.configPropertiesBackup != null) {
                for (Entry<Object, Object> e : this.configPropertiesBackup.entrySet()) {
                    this.config.getProperties().setProperty(e.getKey().toString(), e.getValue().toString());
                }
                this.configPropertiesBackup = null;
            }
        }
        this.config.getProperties()
                .setProperty(PROPERTY_DO_NOT_SAVE_CONFIGURATION,
                        Boolean.toString(selected));
    }//GEN-LAST:event_doNotSaveConfigurationActionPerformed

    //o botão da janela de recuperação
    private void recoveryWindowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recoveryWindowButtonActionPerformed
        new RecoveryWindow(this, this.dict, this.numberOfWords).setVisible(true);
    }//GEN-LAST:event_recoveryWindowButtonActionPerformed

    //mostra a senha em texto plano
    private void showPasswordAsPlaintext(boolean passwordOnly) {
        if (this.generatedPasswordIndices == null) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this,
                    "Nenhuma senha gerada!", "Erro",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        String text;
        if (!passwordOnly) {
            text = plainText(
                    this.generatedPassword.getText(),
                    this.extraFields.getDictionaryName().getText(),
                    this.extraFields.getRecoveryWord().getText(),
                    this.extraFields.getVerificationCode().getText()
            );
        } else {
            text = this.generatedPassword.getText();
        }
        new TextDialog(this,
                "Texto Plano",
                text
        ).setVisible(true);
    }

    //mostra a senha em texto plano (todos os campos)
    private void seeAsPlainTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeAsPlainTextActionPerformed
        showPasswordAsPlaintext(false);
    }//GEN-LAST:event_seeAsPlainTextActionPerformed

    //o método do botão de gerar várias senhas
    private void generateMultiplePasswords(boolean passwordOnly) {
        //pede a quantidade de senhas para o usuário
        String input = JOptionPane
                .showInputDialog(this,
                        "Quantidade de Senhas:", "Insira a Quantidade de Senhas",
                        JOptionPane.INFORMATION_MESSAGE);
        if (input == null) {
            return;
        }

        //faz parse do input do usuário
        int numberOfPasswords;
        try {
            numberOfPasswords = Integer.parseInt(input);
            if (numberOfPasswords <= 0) {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException ex) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Quantidade Inválida!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //as seções para impressão
        List<String> sections = new ArrayList<>();

        //gera as senhas
        StringBuilder b = new StringBuilder();
        for (int i = 0; i < numberOfPasswords; i++) {
            int[] password = generatePassword();
            String passwordText = decoratePassword(getDictionaryWords(password));
            if (passwordOnly) {
                b.append(passwordText).append("\n");
                sections.add(passwordText);
            } else {
                int recovery = calculateRecoveryWord(password);

                byte[] randomSalt = VerificationWindow.getRandomSalt(this.random);
                byte[] codeBytes = VerificationWindow.getVerificationCode(randomSalt, this.generatedPassword.getText().toCharArray());

                String plainText = plainText(
                        passwordText,
                        this.dict.toString(),
                        getDictionaryWord(recovery),
                        VerificationWindow.getVerificationCodeHexString(codeBytes)
                );

                b.append(plainText).append("\n\n");
                sections.add(plainText);
            }
        }
        //mostra as senhas para o usuário
        new TextDialog(this, "Texto Plano", b.toString()) {
            @Override
            protected String[] getTextSectionsForPrinting(boolean sectionCutlines) {
                if (!sectionCutlines && !passwordOnly) {
                    List<String> transformed = new ArrayList<>();
                    for (int i = 0; i < sections.size(); i++) {
                        String section = sections.get(i);
                        if (i != (sections.size() - 1)) {
                            section = section + "\n";
                        }
                        transformed.add(section);
                    }
                    return transformed.toArray(String[]::new);
                }
                return sections.toArray(String[]::new);
            }
        }.setVisible(true);
    }

    //o botão de gerar várias senhas (todos os campos)
    private void generateMultiplePasswordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMultiplePasswordsActionPerformed
        generateMultiplePasswords(false);
    }//GEN-LAST:event_generateMultiplePasswordsActionPerformed

    //o botão de mudar o sufixo de senha
    private void passwordSuffixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordSuffixButtonActionPerformed
        String result = JOptionPane.showInputDialog(this, "Insira o Sufixo de Senha:", this.passwordSuffix);
        if (result != null) {
            this.passwordSuffix = result.trim();
            passwordSuffixChanged();
        }
    }//GEN-LAST:event_passwordSuffixButtonActionPerformed

    //a janela de verificação de senha
    private void verificationWindowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificationWindowButtonActionPerformed
        new VerificationWindow(this, this.random).setVisible(true);
    }//GEN-LAST:event_verificationWindowButtonActionPerformed

    //o botão de mostrar os campos extras
    private void showExtraFieldsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showExtraFieldsButtonActionPerformed
        if (!this.extraFields.isVisible()) {
            this.extraFields.setLocationRelativeTo(this);
            this.extraFields.setVisible(true);
        }
    }//GEN-LAST:event_showExtraFieldsButtonActionPerformed

    //a checkbox de usar um sufixo aleatório
    private void useRandomSuffixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useRandomSuffixButtonActionPerformed
        this.passwordSuffixButton.setEnabled(!this.useRandomSuffixButton.isSelected());
        this.config.getProperties().setProperty(PROPERTY_USE_RANDOM_SUFFIX,
                Boolean.toString(this.useRandomSuffixButton.isSelected()));
        updatePasswordField();
    }//GEN-LAST:event_useRandomSuffixButtonActionPerformed
    
    //mostra a senha em texto plano (apenas a senha)
    private void seeAsPlainTextOnlyPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeAsPlainTextOnlyPasswordActionPerformed
        showPasswordAsPlaintext(true);
    }//GEN-LAST:event_seeAsPlainTextOnlyPasswordActionPerformed

    //o botão de gerar várias senhas (apenas a senha)
    private void generateMultiplePasswordsOnlyPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMultiplePasswordsOnlyPasswordActionPerformed
        generateMultiplePasswords(true);
    }//GEN-LAST:event_generateMultiplePasswordsOnlyPasswordActionPerformed

    //o callback para quando o sufixo de senha for alterado
    private void passwordSuffixChanged() {
        this.config.getProperties().setProperty(PROPERTY_SUFFIX, this.passwordSuffix);
        updatePasswordField();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutButton;
    private javax.swing.JMenu capitalizationMenu;
    private javax.swing.JMenu dictionaryMenu;
    private javax.swing.JCheckBoxMenuItem doNotSaveConfiguration;
    private javax.swing.JMenuItem generateMultiplePasswords;
    private javax.swing.JMenuItem generateMultiplePasswordsOnlyPassword;
    private javax.swing.JButton generatePassword;
    private javax.swing.JTextField generatedPassword;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenu numberOfWordsMenu;
    private javax.swing.JLabel passwordStrength;
    private javax.swing.JMenuItem passwordSuffixButton;
    private javax.swing.JMenuItem recoveryWindowButton;
    private javax.swing.JMenuItem seeAsPlainText;
    private javax.swing.JMenuItem seeAsPlainTextOnlyPassword;
    private javax.swing.JMenu separatorMenu;
    private javax.swing.JButton showExtraFieldsButton;
    private javax.swing.JMenu suffixMenu;
    private javax.swing.JCheckBoxMenuItem useRandomSuffixButton;
    private javax.swing.JMenuItem verificationWindowButton;
    // End of variables declaration//GEN-END:variables
}
